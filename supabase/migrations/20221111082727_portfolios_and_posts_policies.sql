-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.portfolios
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    name character varying COLLATE pg_catalog."default",
    user_id uuid,
    url character varying COLLATE pg_catalog."default" NOT NULL,
    feed_url character varying COLLATE pg_catalog."default",
    platform character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'custom'::character varying,
    CONSTRAINT portfolios_pkey PRIMARY KEY (id),
    CONSTRAINT portfolios_url_key UNIQUE (url),
    CONSTRAINT portfolios_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.portfolios
    OWNER to postgres;

ALTER TABLE IF EXISTS public.portfolios
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.portfolios TO anon;

GRANT ALL ON TABLE public.portfolios TO authenticated;

GRANT ALL ON TABLE public.portfolios TO postgres;

GRANT ALL ON TABLE public.portfolios TO service_role;
CREATE POLICY "Public portfolios are viewable by everyone."
    ON public.portfolios
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
CREATE POLICY "Users can insert their own portfolio."
    ON public.portfolios
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can update own portfolio."
    ON public.portfolios
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = user_id));

ALTER TABLE IF EXISTS public.posts
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can insert their own post."
    ON public.posts
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.uid() = user_id));


CREATE POLICY "Users can update own post."
    ON public.posts
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = user_id));

CREATE POLICY "Public posts are viewable by everyone."
    ON public.posts
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

REVOKE ALL ON TABLE public.profiles FROM authenticated;
REVOKE ALL ON TABLE public.profiles FROM postgres;
REVOKE ALL ON TABLE public.profiles FROM service_role;
GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO service_role;

GRANT ALL ON TABLE public.profiles TO postgres;
